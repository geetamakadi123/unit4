ArrayList:
ArrayList internally uses a dynamic array to store the elements.Manipulation with ArrayList is slow because it internally uses an array.
If any element is removed from the array, all the other elements are shifted in memory. An ArrayList class can act as a list only because
it implements List only.ArrayList is better for storing and accessing data.The memory location for the elements of an ArrayList is contiguous.
To be precise, an ArrayList is a resizable array.

LinkedList:
LinkedList internally uses a doubly linked list to store the elements.Manipulation with LinkedList is faster than ArrayList because it uses a
doubly linked list, so no bit shifting is required in memory.LinkedList class can act as a list and queue both because it implements List
and Deque interfaces.LinkedList is better for manipulating data.The location for the elements of a linked list is not contagious.LinkedList
implements the doubly linked list of the list interface.


Example of ArrayList and LinkedList:

class TestArrayLinked{
 public static void main(String args[]){

  List<String> al=new ArrayList<String>();//creating arraylist
  al.add("P");//adding object in arraylist
  al.add("A");
  al.add("R");
  al.add("A");
  al.add("G");

  List<String> al2=new LinkedList<String>();//creating linkedlist
  al2.add("Poonam");//adding object in linkedlist
  al2.add("Anchal");
  al2.add("Ravi");
  al2.add("Ashu");
  al2.add("Geeta");

  System.out.println("arraylist: "+al);
  System.out.println("linkedlist: "+al2);
 }
}
output:
arraylist: [P,A,R,A,G]
linkedlist: [Poonam,Anchal,Ravi,Ashu,Geeta]